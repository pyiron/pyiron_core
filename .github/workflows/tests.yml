name: Test suite
on: [pull_request]

jobs:
  commit-updated-env: # Keep envs read by external sources (binder and readthedocs) up-to-date
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.DEPENDABOT_WORKFLOW_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }} # Check out the head of the actual branch, not the PR
          fetch-depth: 0 # otherwise, you will fail to push refs to dest repo
      - uses: pyiron/actions/write-environment@actions-4.0.8
        with:
          env-files: project-env.yml .ci_support/binder-env.yml
          output-env-file: .binder/environment.yml
      - name: commit
        id: commit-binder-env
        continue-on-error: true  # Allow "failure" when there are no changes (the working tree is clean)
        run: |
          git config --local user.email "pyiron@mpie.de"
          git config --local user.name "pyiron-runner"
          git add .binder/environment.yml
          git commit -m "[dependabot skip] Update env file" -a
      - name: push
        if: steps.commit-docs-env.outcome == 'success'  # But only push if we made it here without continue-on-error
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.DEPENDABOT_WORKFLOW_TOKEN }}
          branch: ${{ github.event.pull_request.head.ref }}

  test-suite:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: localuser
          POSTGRES_PASSWORD: none
          POSTGRES_DB: localdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    strategy:
      matrix:
        task: [tests, notebooks]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
      - name: Write composite environment file
        uses: pyiron/actions/write-environment@actions-4.0.8
        with:
          env-files: project-env.yml
          output-env-file: environment.yml
      - name: Build environment from file
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: "3.12"
          miniforge-version: latest
          channels: conda-forge
          conda-remove-defaults: true
          channel-priority: strict
          environment-file: environment.yml
        timeout-minutes: 5
      - name: Build package
        shell: bash -l {0}
        run: pip install . --no-deps --no-build-isolation
        timeout-minutes: 4
      - name: Run tests
        if: matrix.task == 'tests'
        shell: bash -l {0}
        run: python -m unittest discover -s tests -v
        timeout-minutes: 5
      - name: Execute notebooks
        if: matrix.task == 'notebooks'
        shell: bash -l {0}
        run: |
          failed_notebooks=()
          for notebook in ./notebooks/running/*.ipynb; do
            echo "Executing: $notebook"
            if papermill "$notebook" "$notebook"; then
              echo "✓ PASSED: $notebook"
            else
              echo "✗ FAILED: $notebook" 
              failed_notebooks+=("$notebook")
            fi
          done
          if [ ${#failed_notebooks[@]} -ne 0 ]; then
            echo "Failed notebooks: ${failed_notebooks[*]}"
            exit 1
          fi
          echo "All notebooks passed!"
        timeout-minutes: 10